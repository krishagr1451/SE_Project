
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  phone: 'phone',
  role: 'role',
  isVerified: 'isVerified',
  licenseNumber: 'licenseNumber',
  createdAt: 'createdAt'
};

exports.Prisma.CarScalarFieldEnum = {
  id: 'id',
  make: 'make',
  model: 'model',
  year: 'year',
  color: 'color',
  pricePerDay: 'pricePerDay',
  hourlyRate: 'hourlyRate',
  location: 'location',
  licensePlate: 'licensePlate',
  status: 'status',
  description: 'description',
  imageUrl: 'imageUrl',
  available: 'available',
  ownerId: 'ownerId',
  createdAt: 'createdAt'
};

exports.Prisma.CarpoolScalarFieldEnum = {
  id: 'id',
  from: 'from',
  to: 'to',
  departureTime: 'departureTime',
  availableSeats: 'availableSeats',
  pricePerSeat: 'pricePerSeat',
  description: 'description',
  driverId: 'driverId',
  createdAt: 'createdAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  carId: 'carId',
  carpoolId: 'carpoolId',
  startDate: 'startDate',
  endDate: 'endDate',
  totalPrice: 'totalPrice',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  userId: 'userId',
  carId: 'carId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.RideScalarFieldEnum = {
  id: 'id',
  passengerId: 'passengerId',
  driverId: 'driverId',
  pickupLocation: 'pickupLocation',
  pickupLat: 'pickupLat',
  pickupLng: 'pickupLng',
  dropoffLocation: 'dropoffLocation',
  dropoffLat: 'dropoffLat',
  dropoffLng: 'dropoffLng',
  vehicleType: 'vehicleType',
  fare: 'fare',
  distance: 'distance',
  estimatedTime: 'estimatedTime',
  status: 'status',
  paymentMethod: 'paymentMethod',
  createdAt: 'createdAt',
  acceptedAt: 'acceptedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  type: 'type',
  status: 'status',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  PASSENGER: 'PASSENGER',
  DRIVER: 'DRIVER',
  ADMIN: 'ADMIN'
};

exports.CarStatus = exports.$Enums.CarStatus = {
  AVAILABLE: 'AVAILABLE',
  RENTED: 'RENTED',
  MAINTENANCE: 'MAINTENANCE'
};

exports.RideStatus = exports.$Enums.RideStatus = {
  SEARCHING: 'SEARCHING',
  ACCEPTED: 'ACCEPTED',
  ARRIVED: 'ARRIVED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT',
  REFUND: 'REFUND'
};

exports.VehicleType = exports.$Enums.VehicleType = {
  AUTO: 'AUTO',
  MINI: 'MINI',
  SEDAN: 'SEDAN',
  SUV: 'SUV',
  PREMIUM: 'PREMIUM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Car: 'Car',
  Carpool: 'Carpool',
  Booking: 'Booking',
  Review: 'Review',
  Ride: 'Ride',
  Wallet: 'Wallet',
  Transaction: 'Transaction'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\KRISH AGRAWAL\\Desktop\\sem V\\trial\\car-share-app\\prisma\\generated\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\KRISH AGRAWAL\\Desktop\\sem V\\trial\\car-share-app\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/client\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id            String   @id @default(cuid())\n  email         String   @unique\n  name          String\n  password      String\n  phone         String?\n  role          Role     @default(PASSENGER)\n  isVerified    Boolean  @default(false)\n  licenseNumber String?\n  createdAt     DateTime @default(now())\n\n  cars             Car[]\n  carpools         Carpool[]\n  bookings         Booking[]\n  reviews          Review[]\n  ridesAsPassenger Ride[]        @relation(\"PassengerRides\")\n  ridesAsDriver    Ride[]        @relation(\"DriverRides\")\n  wallet           Wallet?\n  transactions     Transaction[]\n}\n\nmodel Car {\n  id           String    @id @default(cuid())\n  make         String\n  model        String\n  year         Int\n  color        String\n  pricePerDay  Float\n  hourlyRate   Float?\n  location     String\n  licensePlate String?\n  status       CarStatus @default(AVAILABLE)\n  description  String?\n  imageUrl     String?\n  available    Boolean   @default(true)\n  ownerId      String\n  createdAt    DateTime  @default(now())\n\n  owner    User      @relation(fields: [ownerId], references: [id])\n  bookings Booking[]\n  reviews  Review[]\n}\n\nmodel Carpool {\n  id             String   @id @default(cuid())\n  from           String\n  to             String\n  departureTime  DateTime\n  availableSeats Int\n  pricePerSeat   Float\n  description    String?\n  driverId       String\n  createdAt      DateTime @default(now())\n\n  driver   User      @relation(fields: [driverId], references: [id])\n  bookings Booking[]\n}\n\nmodel Booking {\n  id         String    @id @default(cuid())\n  userId     String\n  carId      String?\n  carpoolId  String?\n  startDate  DateTime\n  endDate    DateTime?\n  totalPrice Float\n  status     String    @default(\"pending\") // pending, confirmed, cancelled\n  createdAt  DateTime  @default(now())\n\n  user    User     @relation(fields: [userId], references: [id])\n  car     Car?     @relation(fields: [carId], references: [id])\n  carpool Carpool? @relation(fields: [carpoolId], references: [id])\n  reviews Review[]\n}\n\nmodel Review {\n  id        String   @id @default(cuid())\n  bookingId String\n  userId    String\n  carId     String\n  rating    Int\n  comment   String?\n  createdAt DateTime @default(now())\n\n  booking Booking @relation(fields: [bookingId], references: [id])\n  user    User    @relation(fields: [userId], references: [id])\n  car     Car     @relation(fields: [carId], references: [id])\n\n  @@unique([bookingId, userId])\n}\n\nmodel Ride {\n  id              String      @id @default(cuid())\n  passengerId     String\n  driverId        String?\n  pickupLocation  String\n  pickupLat       Float?\n  pickupLng       Float?\n  dropoffLocation String\n  dropoffLat      Float?\n  dropoffLng      Float?\n  vehicleType     VehicleType @default(AUTO)\n  fare            Float?\n  distance        Float?\n  estimatedTime   Int? // in minutes\n  status          RideStatus  @default(SEARCHING)\n  paymentMethod   String?     @default(\"cash\")\n  createdAt       DateTime    @default(now())\n  acceptedAt      DateTime?\n  startedAt       DateTime?\n  completedAt     DateTime?\n\n  passenger User  @relation(\"PassengerRides\", fields: [passengerId], references: [id])\n  driver    User? @relation(\"DriverRides\", fields: [driverId], references: [id])\n}\n\nmodel Wallet {\n  id        String   @id @default(cuid())\n  userId    String   @unique\n  balance   Float    @default(0)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id])\n}\n\nmodel Transaction {\n  id          String          @id @default(cuid())\n  userId      String\n  amount      Float\n  type        TransactionType\n  status      String          @default(\"completed\")\n  description String?\n  createdAt   DateTime        @default(now())\n\n  user User @relation(fields: [userId], references: [id])\n}\n\nenum Role {\n  PASSENGER\n  DRIVER\n  ADMIN\n}\n\nenum CarStatus {\n  AVAILABLE\n  RENTED\n  MAINTENANCE\n}\n\nenum RideStatus {\n  SEARCHING\n  ACCEPTED\n  ARRIVED\n  IN_PROGRESS\n  COMPLETED\n  CANCELLED\n}\n\nenum TransactionType {\n  CREDIT\n  DEBIT\n  REFUND\n}\n\nenum VehicleType {\n  AUTO\n  MINI\n  SEDAN\n  SUV\n  PREMIUM\n}\n",
  "inlineSchemaHash": "8e750a1ecf9120277e3a1f6ab5ffbaa00f322f65062172968ddd37112a8037de",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"licenseNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cars\",\"kind\":\"object\",\"type\":\"Car\",\"relationName\":\"CarToUser\"},{\"name\":\"carpools\",\"kind\":\"object\",\"type\":\"Carpool\",\"relationName\":\"CarpoolToUser\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToUser\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReviewToUser\"},{\"name\":\"ridesAsPassenger\",\"kind\":\"object\",\"type\":\"Ride\",\"relationName\":\"PassengerRides\"},{\"name\":\"ridesAsDriver\",\"kind\":\"object\",\"type\":\"Ride\",\"relationName\":\"DriverRides\"},{\"name\":\"wallet\",\"kind\":\"object\",\"type\":\"Wallet\",\"relationName\":\"UserToWallet\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToUser\"}],\"dbName\":null},\"Car\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"make\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"model\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pricePerDay\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"hourlyRate\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"licensePlate\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"CarStatus\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"available\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CarToUser\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToCar\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"CarToReview\"}],\"dbName\":null},\"Carpool\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"from\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"to\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"departureTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"availableSeats\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"pricePerSeat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"driverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"driver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CarpoolToUser\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToCarpool\"}],\"dbName\":null},\"Booking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"carId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"carpoolId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"totalPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BookingToUser\"},{\"name\":\"car\",\"kind\":\"object\",\"type\":\"Car\",\"relationName\":\"BookingToCar\"},{\"name\":\"carpool\",\"kind\":\"object\",\"type\":\"Carpool\",\"relationName\":\"BookingToCarpool\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"BookingToReview\"}],\"dbName\":null},\"Review\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"carId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToReview\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReviewToUser\"},{\"name\":\"car\",\"kind\":\"object\",\"type\":\"Car\",\"relationName\":\"CarToReview\"}],\"dbName\":null},\"Ride\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passengerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"driverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pickupLocation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pickupLat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"pickupLng\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"dropoffLocation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dropoffLat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"dropoffLng\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"vehicleType\",\"kind\":\"enum\",\"type\":\"VehicleType\"},{\"name\":\"fare\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"distance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"estimatedTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"RideStatus\"},{\"name\":\"paymentMethod\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"acceptedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"passenger\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PassengerRides\"},{\"name\":\"driver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DriverRides\"}],\"dbName\":null},\"Wallet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"balance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWallet\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TransactionType\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TransactionToUser\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

