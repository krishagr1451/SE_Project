// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String
  phone         String?
  role          Role     @default(PASSENGER)
  isVerified    Boolean  @default(false)
  licenseNumber String?
  createdAt     DateTime @default(now())

  cars             Car[]
  carpools         Carpool[]
  bookings         Booking[]
  reviews          Review[]
  ridesAsPassenger Ride[]        @relation("PassengerRides")
  ridesAsDriver    Ride[]        @relation("DriverRides")
  wallet           Wallet?
  transactions     Transaction[]
}

model Car {
  id           String    @id @default(cuid())
  make         String
  model        String
  year         Int
  color        String
  pricePerDay  Float
  hourlyRate   Float?
  location     String
  licensePlate String?
  status       CarStatus @default(AVAILABLE)
  description  String?
  imageUrl     String?
  available    Boolean   @default(true)
  ownerId      String
  createdAt    DateTime  @default(now())

  owner    User      @relation(fields: [ownerId], references: [id])
  bookings Booking[]
  reviews  Review[]
}

model Carpool {
  id             String   @id @default(cuid())
  from           String
  to             String
  departureTime  DateTime
  availableSeats Int
  pricePerSeat   Float
  description    String?
  driverId       String
  createdAt      DateTime @default(now())

  driver   User      @relation(fields: [driverId], references: [id])
  bookings Booking[]
}

model Booking {
  id         String    @id @default(cuid())
  userId     String
  carId      String?
  carpoolId  String?
  startDate  DateTime
  endDate    DateTime?
  totalPrice Float
  status     String    @default("pending") // pending, confirmed, cancelled
  createdAt  DateTime  @default(now())

  user    User     @relation(fields: [userId], references: [id])
  car     Car?     @relation(fields: [carId], references: [id])
  carpool Carpool? @relation(fields: [carpoolId], references: [id])
  reviews Review[]
}

model Review {
  id        String   @id @default(cuid())
  bookingId String
  userId    String
  carId     String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  car     Car     @relation(fields: [carId], references: [id])

  @@unique([bookingId, userId])
}

model Ride {
  id              String      @id @default(cuid())
  passengerId     String
  driverId        String?
  pickupLocation  String
  pickupLat       Float?
  pickupLng       Float?
  dropoffLocation String
  dropoffLat      Float?
  dropoffLng      Float?
  vehicleType     VehicleType @default(AUTO)
  fare            Float?
  distance        Float?
  estimatedTime   Int? // in minutes
  status          RideStatus  @default(SEARCHING)
  paymentMethod   String?     @default("cash")
  createdAt       DateTime    @default(now())
  acceptedAt      DateTime?
  startedAt       DateTime?
  completedAt     DateTime?

  passenger User  @relation("PassengerRides", fields: [passengerId], references: [id])
  driver    User? @relation("DriverRides", fields: [driverId], references: [id])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  amount      Float
  type        TransactionType
  status      String          @default("completed")
  description String?
  createdAt   DateTime        @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum Role {
  PASSENGER
  DRIVER
  ADMIN
}

enum CarStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

enum RideStatus {
  SEARCHING
  ACCEPTED
  ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TransactionType {
  CREDIT
  DEBIT
  REFUND
}

enum VehicleType {
  AUTO
  MINI
  SEDAN
  SUV
  PREMIUM
}
